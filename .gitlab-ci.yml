stages:
  - flake-update
  - eval
  - build

variables:
  GIT_USER_NAME: "CI Bot"
  GIT_USER_EMAIL: "ci-bot@example.com"

before_script:
  # Configure git
  - git config --global user.name "$GIT_USER_NAME"
  - git config --global user.email "$GIT_USER_EMAIL"
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

flake-update:
  stage: flake-update
  script:
    - nix flake update . --commit-lock-file
    - git push origin $CI_COMMIT_REF_NAME  # Push the changes to the branch
  only:
    - schedules  # Only run this on scheduled pipelines
  tags:
    - nightly

eval:
  stage: eval
  script: 
    - nix-env -iA nixpkgs.jq
    - names=$(nix --extra-experimental-features "nix-command flakes" eval --json .#nixosConfigurations --apply 'builtins.attrNames')
    - "json=$(echo \"$names\" | nix --extra-experimental-features \"nix-command flakes\" run --inputs-from . nixpkgs#jq -- '{include: map({name: .})}')"
    - echo "$json" > matrix.json
  artifacts:
    paths:
      - matrix.json

build:
  stage: build
  script:
    - nix-env -iA nixpkgs.jq 
    - configs=$(cat matrix.json | jq -r '.include[].name')
    - for config in $configs; do
        nix build --extra-experimental-features "nix-command flakes" --accept-flake-config -L --fallback --option trusted-users $(whoami) .#nixosConfigurations.${config}.config.system.build.toplevel;
      done
  needs:
    - job: eval
      artifacts: true
  only:
    - branches

